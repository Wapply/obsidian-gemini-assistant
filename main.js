/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianGeminiAssistantPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiKey: ""
};
var ObsidianGeminiAssistantPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "gemini-generate",
      name: "Gemini: Generar texto",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        if (!selectedText) {
          new import_obsidian.Notice("Selecciona un texto primero.");
          return;
        }
        this.generateWithGemini(selectedText, editor);
      }
    });
    this.addSettingTab(new ObsidianGeminiAssistantSettingTab(this.app, this));
  }
  onunload() {
  }
  async generateWithGemini(text, editor) {
    const context = this.getContext(editor);
    try {
      const simulatedResponse = {
        generated_text: `## Respuesta de Gemini (simulada)

Basado en el texto: "${text}"

Y en el contexto: "${context}"`
      };
      const generatedText = simulatedResponse.generated_text;
      editor.replaceSelection(generatedText);
    } catch (error) {
      new import_obsidian.Notice(`Error al generar texto con Gemini: ${error.message}`);
    }
  }
  getContext(editor) {
    var _a, _b;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return "";
    const file = view.file;
    if (!file)
      return "";
    const cache = this.app.metadataCache.getFileCache(file);
    if (!cache)
      return "";
    let context = `T\xEDtulo de la nota: "${((_a = cache.frontmatter) == null ? void 0 : _a.title) || file.basename}"`;
    if ((_b = cache.frontmatter) == null ? void 0 : _b.tags) {
      context += `, Etiquetas: "${cache.frontmatter.tags.join(", ")}"`;
    }
    const lineNumber = editor.getCursor().line;
    const paragraph = editor.getLine(lineNumber);
    context += `, P\xE1rrafo actual: "${paragraph}"`;
    return context;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ObsidianGeminiAssistantSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n de Obsidian Gemini Assistant" });
    new import_obsidian.Setting(containerEl).setName("API Token de Gemini").setDesc("Ingresa tu clave de API para acceder a Gemini.").addText(
      (text) => text.setPlaceholder("Ingresa tu API Token aqu\xED").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgRWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbnRlcmZhY2UgT2JzaWRpYW5HZW1pbmlBc3Npc3RhbnRTZXR0aW5ncyB7XHJcbiAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgLy8gLi4uIG90cmFzIG9wY2lvbmVzIGRlIGNvbmZpZ3VyYWNpXHUwMEYzbiBlbiBlbCBmdXR1cm9cclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogT2JzaWRpYW5HZW1pbmlBc3Npc3RhbnRTZXR0aW5ncyA9IHtcclxuICBhcGlLZXk6ICcnLCBcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2lkaWFuR2VtaW5pQXNzaXN0YW50UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICBzZXR0aW5nczogT2JzaWRpYW5HZW1pbmlBc3Npc3RhbnRTZXR0aW5ncztcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ2dlbWluaS1nZW5lcmF0ZScsXHJcbiAgICAgIG5hbWU6ICdHZW1pbmk6IEdlbmVyYXIgdGV4dG8nLFxyXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RlZFRleHQpIHtcclxuICAgICAgICAgIG5ldyBOb3RpY2UoJ1NlbGVjY2lvbmEgdW4gdGV4dG8gcHJpbWVyby4nKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVdpdGhHZW1pbmkoc2VsZWN0ZWRUZXh0LCBlZGl0b3IpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBPYnNpZGlhbkdlbWluaUFzc2lzdGFudFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuICB9XHJcblxyXG4gIG9udW5sb2FkKCkge31cclxuXHJcbiAgYXN5bmMgZ2VuZXJhdGVXaXRoR2VtaW5pKHRleHQ6IHN0cmluZywgZWRpdG9yOiBFZGl0b3IpIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQoZWRpdG9yKTsgXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gU2ltdWxhIHVuYSByZXNwdWVzdGEgZGUgdW5hIEFQSSBkZSBHZW1pbmkgKHJlZW1wbGF6YXIgY29uIGxhIGxcdTAwRjNnaWNhIHJlYWwpXHJcbiAgICAgIGNvbnN0IHNpbXVsYXRlZFJlc3BvbnNlID0ge1xyXG4gICAgICAgIGdlbmVyYXRlZF90ZXh0OiBgIyMgUmVzcHVlc3RhIGRlIEdlbWluaSAoc2ltdWxhZGEpXFxuXFxuQmFzYWRvIGVuIGVsIHRleHRvOiBcIiR7dGV4dH1cIlxcblxcblkgZW4gZWwgY29udGV4dG86IFwiJHtjb250ZXh0fVwiYCxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IGdlbmVyYXRlZFRleHQgPSBzaW11bGF0ZWRSZXNwb25zZS5nZW5lcmF0ZWRfdGV4dDsgXHJcbiAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGdlbmVyYXRlZFRleHQpOyBcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBuZXcgTm90aWNlKGBFcnJvciBhbCBnZW5lcmFyIHRleHRvIGNvbiBHZW1pbmk6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldENvbnRleHQoZWRpdG9yOiBFZGl0b3IpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICBpZiAoIXZpZXcpIHJldHVybiAnJzsgLy8gQXNlZ3VyYXJzZSBkZSBxdWUgZXN0YW1vcyBlbiB1bmEgdmlzdGEgZGUgTWFya2Rvd25cclxuXHJcbiAgICBjb25zdCBmaWxlID0gdmlldy5maWxlO1xyXG4gICAgaWYgKCFmaWxlKSByZXR1cm4gJyc7XHJcblxyXG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgIGlmICghY2FjaGUpIHJldHVybiAnJztcclxuXHJcbiAgICAvLyBPYnRlbmVyIGVsIHRcdTAwRUR0dWxvXHJcbiAgICBsZXQgY29udGV4dCA9IGBUXHUwMEVEdHVsbyBkZSBsYSBub3RhOiBcIiR7Y2FjaGUuZnJvbnRtYXR0ZXI/LnRpdGxlIHx8IGZpbGUuYmFzZW5hbWV9XCJgOyBcclxuXHJcbiAgICAvLyBBZ3JlZ2FyIGV0aXF1ZXRhcywgc2kgZXhpc3RlblxyXG4gICAgaWYgKGNhY2hlLmZyb250bWF0dGVyPy50YWdzKSB7XHJcbiAgICAgIGNvbnRleHQgKz0gYCwgRXRpcXVldGFzOiBcIiR7Y2FjaGUuZnJvbnRtYXR0ZXIudGFncy5qb2luKCcsICcpfVwiYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFamVtcGxvOiBhZ3JlZ2FyIGVsIHBcdTAwRTFycmFmbyBhY3R1YWwgYWwgY29udGV4dG9cclxuICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcclxuICAgIGNvbnN0IHBhcmFncmFwaCA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpO1xyXG4gICAgY29udGV4dCArPSBgLCBQXHUwMEUxcnJhZm8gYWN0dWFsOiBcIiR7cGFyYWdyYXBofVwiYDtcclxuXHJcbiAgICByZXR1cm4gY29udGV4dDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIENsYXNlIHBhcmEgbGEgcGVzdGFcdTAwRjFhIGRlIGNvbmZpZ3VyYWNpXHUwMEYzblxyXG5jbGFzcyBPYnNpZGlhbkdlbWluaUFzc2lzdGFudFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogT2JzaWRpYW5HZW1pbmlBc3Npc3RhbnRQbHVnaW47XHJcbiAgXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBPYnNpZGlhbkdlbWluaUFzc2lzdGFudFBsdWdpbikge1xyXG4gICAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgICAgY29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcbiAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcbiAgXHJcbiAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnQ29uZmlndXJhY2lcdTAwRjNuIGRlIE9ic2lkaWFuIEdlbWluaSBBc3Npc3RhbnQnfSk7XHJcbiAgXHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdBUEkgVG9rZW4gZGUgR2VtaW5pJylcclxuICAgICAgICAuc2V0RGVzYygnSW5ncmVzYSB0dSBjbGF2ZSBkZSBBUEkgcGFyYSBhY2NlZGVyIGEgR2VtaW5pLicpXHJcbiAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IFxyXG4gICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0luZ3Jlc2EgdHUgQVBJIFRva2VuIGFxdVx1MDBFRCcpXHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlLZXkpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlLZXkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gIH0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXFGO0FBT3JGLElBQU0sbUJBQW9EO0FBQUEsRUFDeEQsUUFBUTtBQUNWO0FBRUEsSUFBcUIsZ0NBQXJCLGNBQTJELHVCQUFPO0FBQUEsRUFHaEUsTUFBTSxTQUFTO0FBQ2IsVUFBTSxLQUFLLGFBQWE7QUFFeEIsU0FBSyxXQUFXO0FBQUEsTUFDZCxJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QjtBQUN0RCxjQUFNLGVBQWUsT0FBTyxhQUFhO0FBQ3pDLFlBQUksQ0FBQyxjQUFjO0FBQ2pCLGNBQUksdUJBQU8sOEJBQThCO0FBQ3pDO0FBQUEsUUFDRjtBQUNBLGFBQUssbUJBQW1CLGNBQWMsTUFBTTtBQUFBLE1BQzlDO0FBQUEsSUFDRixDQUFDO0FBRUQsU0FBSyxjQUFjLElBQUksa0NBQWtDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUM7QUFBQSxFQUVaLE1BQU0sbUJBQW1CLE1BQWMsUUFBZ0I7QUFDckQsVUFBTSxVQUFVLEtBQUssV0FBVyxNQUFNO0FBRXRDLFFBQUk7QUFFRixZQUFNLG9CQUFvQjtBQUFBLFFBQ3hCLGdCQUFnQjtBQUFBO0FBQUEsdUJBQTZEO0FBQUE7QUFBQSxxQkFBK0I7QUFBQSxNQUM5RztBQUVBLFlBQU0sZ0JBQWdCLGtCQUFrQjtBQUN4QyxhQUFPLGlCQUFpQixhQUFhO0FBQUEsSUFFdkMsU0FBUyxPQUFQO0FBQ0EsVUFBSSx1QkFBTyxzQ0FBc0MsTUFBTSxTQUFTO0FBQUEsSUFDbEU7QUFBQSxFQUNGO0FBQUEsRUFFQSxXQUFXLFFBQXdCO0FBcERyQztBQXFESSxVQUFNLE9BQU8sS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDRCQUFZO0FBQ2hFLFFBQUksQ0FBQztBQUFNLGFBQU87QUFFbEIsVUFBTSxPQUFPLEtBQUs7QUFDbEIsUUFBSSxDQUFDO0FBQU0sYUFBTztBQUVsQixVQUFNLFFBQVEsS0FBSyxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQ3RELFFBQUksQ0FBQztBQUFPLGFBQU87QUFHbkIsUUFBSSxVQUFVLDRCQUF1QixXQUFNLGdCQUFOLG1CQUFtQixVQUFTLEtBQUs7QUFHdEUsU0FBSSxXQUFNLGdCQUFOLG1CQUFtQixNQUFNO0FBQzNCLGlCQUFXLGlCQUFpQixNQUFNLFlBQVksS0FBSyxLQUFLLElBQUk7QUFBQSxJQUM5RDtBQUdBLFVBQU0sYUFBYSxPQUFPLFVBQVUsRUFBRTtBQUN0QyxVQUFNLFlBQVksT0FBTyxRQUFRLFVBQVU7QUFDM0MsZUFBVyx5QkFBc0I7QUFFakMsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbkM7QUFDRjtBQUdBLElBQU0sb0NBQU4sY0FBZ0QsaUNBQWlCO0FBQUEsRUFHN0QsWUFBWSxLQUFVLFFBQXVDO0FBQzNELFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFVBQU0sRUFBQyxZQUFXLElBQUk7QUFDdEIsZ0JBQVksTUFBTTtBQUVsQixnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLGdEQUE0QyxDQUFDO0FBRS9FLFFBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLHFCQUFxQixFQUM3QixRQUFRLGdEQUFnRCxFQUN4RDtBQUFBLE1BQVEsQ0FBQyxTQUNSLEtBQ0csZUFBZSw4QkFBMkIsRUFDMUMsU0FBUyxLQUFLLE9BQU8sU0FBUyxNQUFNLEVBQ3BDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLGFBQUssT0FBTyxTQUFTLFNBQVM7QUFDOUIsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
