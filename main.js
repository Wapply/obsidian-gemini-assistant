/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardBoardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  openNoteInNewTab: false,
  cardWidth: 200,
  // Default card width
  cardHeight: 200
  // Default card height
};
var CardBoardSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "CardBoard Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Open Note in New Tab").setDesc("Open notes in a new tab when clicked").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.openNoteInNewTab).onChange(async (value) => {
        this.plugin.settings.openNoteInNewTab = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var CardBoardPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    console.log("Loading CardBoard Plugin");
    await this.loadSettings();
    this.addSettingTab(new CardBoardSettingTab(this.app, this));
    this.addRibbonIcon("blocks", "CardBoard", () => this.openCardBoard());
    this.addCommand({
      id: "open-card-board",
      name: "Open Card Board",
      callback: () => this.openCardBoard()
    });
    this.registerView(
      "card-board-view",
      (leaf) => {
        this.view = new CardBoardView(leaf, this.app.vault, this);
        return this.view;
      }
    );
    this.app.workspace.onLayoutReady(() => this.activateView());
  }
  async openCardBoard() {
    this.activateView();
  }
  activateView() {
    this.app.workspace.detachLeavesOfType("card-board-view");
    const rightLeaf = this.app.workspace.getRightLeaf(false);
    if (rightLeaf) {
      rightLeaf.setViewState({ type: "card-board-view" });
    }
  }
  onunload() {
    this.app.workspace.detachLeavesOfType("card-board-view");
    console.log("Unloading CardBoard Plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var CardBoardView = class extends import_obsidian2.ItemView {
  // Add the plugin property
  constructor(leaf, vault, plugin) {
    super(leaf);
    this.vault = vault;
    this.folderStack = [this.vault.getRoot()];
    this.plugin = plugin;
  }
  getViewType() {
    return "card-board-view";
  }
  getDisplayText() {
    return "Card Board";
  }
  async onOpen() {
    await this.renderView();
  }
  async renderView() {
    const container = this.containerEl.children[1];
    container.empty();
    container.classList.add("board-container");
    await this.createFolderView(this.folderStack[this.folderStack.length - 1], container);
  }
  async createFolderView(folder, parent) {
    const folderContainer = parent.createDiv({ cls: "folder-container" });
    const folderHeader = folderContainer.createDiv({ cls: "folder-header" });
    if (this.folderStack.length > 1) {
      const backButton = folderHeader.createEl("button", { cls: "back-button", text: "\u2190" });
      backButton.addEventListener("click", () => {
        this.folderStack.pop();
        this.renderView();
      });
    }
    folderHeader.createSpan({ text: folder.name });
    const notesContainer = folderContainer.createDiv({ cls: "notes-container" });
    const folders = folder.children.filter((child) => child instanceof import_obsidian2.TFolder);
    const notes = folder.children.filter((child) => child instanceof import_obsidian2.TFile && child.extension === "md");
    for (const folder2 of folders) {
      notesContainer.appendChild(this.createFolderCard(folder2));
    }
    for (const note of notes) {
      notesContainer.appendChild(await this.createCard(note));
    }
  }
  createFolderCard(folder) {
    const card = createDiv({ cls: ["card", "folder-card"] });
    const titleContainer = card.createDiv({ cls: "folder-title" });
    titleContainer.textContent = folder.name;
    card.addEventListener("click", () => {
      this.folderStack.push(folder);
      this.renderView();
    });
    return card;
  }
  async createCard(file) {
    const card = createDiv({
      cls: "card",
      attr: {
        style: `width: ${this.plugin.settings.cardWidth}px; height: ${this.plugin.settings.cardHeight}px;`
      }
    });
    const titleContainer = card.createDiv({ cls: "card-title" });
    titleContainer.textContent = file.basename;
    const thumb = await this.getThumbnail(file);
    if (thumb) {
      card.appendChild(thumb);
    } else {
      card.textContent = file.basename;
    }
    card.addEventListener("click", () => {
      const filePath = file.path;
      if (this.plugin.settings.openNoteInNewTab) {
        this.app.workspace.openLinkText(filePath, "", true, { active: true });
      } else {
        this.app.workspace.openLinkText(filePath, "", false);
      }
    });
    const configButton = card.createEl("button", { cls: "config-button", text: "\u2699" });
    configButton.addEventListener("click", (e) => {
      e.stopPropagation();
      new NoteConfigModal(this.app, file, this).open();
    });
    return card;
  }
  async getThumbnail(file) {
    const content = await this.vault.cachedRead(file);
    const imageRegex = /!\[\[(.*?)\]\]|!\[(.*?)\]\(([^)]*)\)/g;
    let match;
    while ((match = imageRegex.exec(content)) !== null) {
      let filePath = match[1] || match[3];
      if (filePath.startsWith("file:///")) {
        filePath = decodeURI(filePath).replace(/^file:\/{2,3}/, "").replace(/\\/g, "/");
      }
      if (/\.(jpg|jpeg|png|gif|bmp|mp4|webm)$/i.test(filePath)) {
        const fileLink = this.app.metadataCache.getFirstLinkpathDest(filePath, file.path);
        if (fileLink) {
          const resourcePath = this.vault.adapter.getResourcePath(fileLink.path);
          if (/\.(jpg|jpeg|png|gif|bmp)$/i.test(filePath)) {
            const img = createEl("img");
            img.src = resourcePath;
            return img;
          } else {
            const video = createEl("video");
            video.src = resourcePath;
            video.controls = true;
            video.muted = true;
            video.style.width = "100%";
            video.style.height = "auto";
            return video;
          }
        }
      }
    }
    return null;
  }
  async onClose() {
  }
};
var NoteConfigModal = class extends import_obsidian2.Modal {
  constructor(app, file, cardBoardView) {
    super(app);
    this.file = file;
    this.imagePaths = [];
    this.currentImageIndex = 0;
    this.cardBoardView = cardBoardView;
  }
  async onOpen() {
    await this.loadImages();
    this.displayImage();
  }
  async loadImages() {
    const content = await this.app.vault.cachedRead(this.file);
    const imageRegex = /!\[\[(.*?)\]\]|!\[(.*?)\]\(([^)]*)\)/g;
    let match;
    while ((match = imageRegex.exec(content)) !== null) {
      let imagePath = match[1] || match[3];
      if (imagePath.startsWith("file:///")) {
        imagePath = decodeURI(imagePath).replace(/^file:\/{2,3}/, "").replace(/\\/g, "/");
      }
      if (imagePath && /\.(jpg|jpeg|png|gif|bmp)$/.test(imagePath)) {
        this.imagePaths.push(imagePath);
      }
    }
  }
  displayImage() {
    this.contentEl.empty();
    if (this.imagePaths.length > 0) {
      const imagePath = this.imagePaths[this.currentImageIndex];
      const fileLink = this.app.metadataCache.getFirstLinkpathDest(imagePath, this.file.path);
      if (fileLink) {
        const imgSrc = this.app.vault.adapter.getResourcePath(fileLink.path);
        const imgContainer = this.contentEl.createDiv({ cls: "image-container" });
        const img = imgContainer.createEl("img", { attr: { src: imgSrc } });
        const buttonsContainer = this.contentEl.createDiv({ cls: "buttons-container" });
        const prevButton = buttonsContainer.createEl("button", { cls: "nav-button prev-button", text: "\u2039" });
        prevButton.addEventListener("click", () => {
          this.currentImageIndex = (this.currentImageIndex - 1 + this.imagePaths.length) % this.imagePaths.length;
          this.displayImage();
        });
        const nextButton = buttonsContainer.createEl("button", { cls: "nav-button next-button", text: "\u203A" });
        nextButton.addEventListener("click", () => {
          this.currentImageIndex = (this.currentImageIndex + 1) % this.imagePaths.length;
          this.displayImage();
        });
        const setThumbnailButton = this.contentEl.createEl("button", {
          cls: "set-button",
          text: "Set as Thumbnail"
        });
        setThumbnailButton.addEventListener("click", async () => {
          await this.setThumbnail(this.imagePaths[this.currentImageIndex]);
          this.close();
        });
      }
    } else {
      this.contentEl.setText("No images found in this note.");
    }
  }
  async setThumbnail(imagePath) {
    let newContent = await this.app.vault.read(this.file);
    const imageRegex = new RegExp(`!\\[\\[${imagePath}\\]\\]|!\\[.*?\\]\\(${imagePath}\\)`, "g");
    newContent = newContent.replace(imageRegex, "");
    if (imagePath.startsWith("file:///")) {
      newContent = `![ ](${imagePath})

${newContent}`;
    } else {
      newContent = `![[${imagePath}]]

${newContent}`;
    }
    await this.app.vault.modify(this.file, newContent);
    this.cardBoardView.renderView();
    this.close();
  }
  onClose() {
    this.contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
